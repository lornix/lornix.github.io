<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Blargle!]]></title>
  <link href="http://lornix.github.io/atom.xml" rel="self"/>
  <link href="http://lornix.github.io/"/>
  <updated>2014-07-04T22:44:11-07:00</updated>
  <id>http://lornix.github.io/</id>
  <author>
    <name><![CDATA[lornix]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[And So It Begins]]></title>
    <link href="http://lornix.github.io/blog/2014/07/04/and-so-it-begins/"/>
    <updated>2014-07-04T20:47:23-07:00</updated>
    <id>http://lornix.github.io/blog/2014/07/04/and-so-it-begins</id>
    <content type="html"><![CDATA[<p>Iâ€™m going to try to document some of my findings and explorations, much of<br />
which I probably have in a git repo somewhere.</p>

<p>Also have to figure out the markdown syntax for here.</p>

<p><strong>Basically</strong>, I <em>should</em> be able to <code>use</code> <a href="http://github.com/lornix/lornix.github.io">GitHub</a> Flavored Markdown here now.</p>

<pre><code>Some code lines here
let x=y*25;
writeln("Argh! Pascal!");
exit(0);
</code></pre>

<p>And then back to regular text.</p>

<p>Same C code.. inline:</p>

<pre><code>#define _GNU_SOURCE
#include &lt;dlfcn.h&gt;
#include &lt;stdio.h&gt;

void* malloc(size_t sz)
{
    void *(*libc_malloc)(size_t) = dlsym(RTLD_NEXT, "malloc");
    printf("malloc\n");
    return libc_malloc(sz);
}

void free(void *p)
{
    void (*libc_free)(void*) = dlsym(RTLD_NEXT, "free");
    printf("free\n");
    libc_free(p);
}

int main()
{
    free(malloc(10));
    return 0;
}
</code></pre>

<p>Some C++, inline:</p>

<pre><code>#include &lt;vector&gt;
#include &lt;string&gt;
#include &lt;sstream&gt;

std::vector&lt;std::string&gt; Lornix::split(std::string s, char delim) {
    std::vector&lt;std::string&gt; elems;
    std::stringstream ss(s);
    std::string item;
    while (std::getline(ss, item, delim)) {
        elems.push_back(item);
    }
    return elems;
}

std::string Lornix::join(std::vector&lt;std::string&gt; v, std::string delim) {
    std::stringstream ss = v[0];
    for (size_t i = 1; i &lt; v.size(); ++i) {
        ss &lt;&lt; delim &lt;&lt; v[i];
    }
    return ss.str();
}
</code></pre>

]]></content>
  </entry>
  
</feed>
